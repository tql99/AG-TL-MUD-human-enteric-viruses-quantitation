else {
u.axis.labs <- paste("PC", choices, sep = "")
}
u.axis.labs <- paste(u.axis.labs, sprintf("(%0.1f%% explained var.)",
100 * pcobj$sdev[choices]^2/sum(pcobj$sdev^2)))
if (!is.null(labels)) {
df.u$labels <- labels
}
if (!is.null(groups)) {
df.u$groups <- groups
}
if (varname.abbrev) {
df.v$varname <- abbreviate(rownames(v))
}
else {
df.v$varname <- rownames(v)
}
df.v$angle <- with(df.v, (180/pi) * atan(yvar/xvar))
df.v$hjust = with(df.v, (1 - varname.adjust * sign(xvar))/2)
g <- ggplot(data = df.u, aes(x = xvar, y = yvar)) + xlab(u.axis.labs[1]) +
ylab(u.axis.labs[2]) + coord_equal()
if (var.axes) {
if (circle) {
theta <- c(seq(-pi, pi, length = 50), seq(pi, -pi,
length = 50))
circle <- data.frame(xvar = r * cos(theta), yvar = r *
sin(theta))
g <- g + geom_path(data = circle, color = muted("white"),
size = 1, alpha = 1/3)
}
g <- g + geom_segment(data = df.v, aes(x = 0, y = 0,
xend = xvar, yend = yvar), arrow = arrow(length = unit(1/2,
"picas")), color = muted("red"))
}
if (!is.null(df.u$labels)) {
if (!is.null(df.u$groups)) {
g <- g + geom_text(aes(label = labels, color = groups),
size = labels.size)
}
else {
g <- g + geom_text(aes(label = labels), size = labels.size)
}
}
else {
if (!is.null(df.u$groups)) {
g <- g + geom_point(aes(color = groups), alpha = alpha)
}
else {
g <- g + geom_point(alpha = alpha)
}
}
if (!is.null(df.u$groups) && ellipse) {
theta <- c(seq(-pi, pi, length = 50), seq(pi, -pi, length = 50))
circle <- cbind(cos(theta), sin(theta))
ell <- ddply(df.u, "groups", function(x) {
if (nrow(x) <= 2) {
return(NULL)
}
sigma <- var(cbind(x$xvar, x$yvar))
mu <- c(mean(x$xvar), mean(x$yvar))
ed <- sqrt(qchisq(ellipse.prob, df = 2))
data.frame(sweep(circle %*% chol(sigma) * ed, 2,
mu, FUN = "+"), groups = x$groups[1])
})
names(ell)[1:2] <- c("xvar", "yvar")
g <- g + geom_path(data = ell, aes(color = groups, group = groups))
}
if (var.axes) {
g <- g + geom_text(data = df.v, aes(label = varname,
x = xvar, y = yvar, angle = angle, hjust = hjust),
color = "darkred", size = varname.size)
}
return(g)
}
dir.create('R_analyses_output/PCA') # Create folder to contain output files.
eff_PCA_in <- read_excel('Excel_analyses/eff_PCA_in.xlsx')
eff_PCA_out <- prcomp(eff_PCA_in[,c(2:ncol(eff_PCA_in))], center = T, scale = T)
eff_PCA_out_summary <- summary(eff_PCA_out) # Get importance of components.
capture.output(eff_PCA_out_summary, file = 'R_analyses_output/PCA/eff_PCA_out_summary.txt')
pdf('R_analyses_output/PCA/eff_PCA_out_biplot.pdf', width = 13, height = 8) # Create the pdf output file.
eff_PCA_out_biplot <- ggbiplot(eff_PCA_out, ellipse = T, groups = as.factor(unique(eff_PCA_in$Time))) +
geom_text(label = eff_PCA_in$Time, color = 'black', size = 4, position = position_jitter(width = .1, height = .1)) +
geom_point(shape = 21, colour = 'black', fill = 'black')
print(eff_PCA_out_biplot)
dev.off() # Tell R you're done adding content to the pdf file.
# PCA:
dir.create('R_analyses_output/PCA') # Create folder to contain output files.
eff_PCA_in <- read_excel('Excel_analyses/eff_PCA_in.xlsx')
eff_PCA_out <- prcomp(eff_PCA_in[,c(2:ncol(eff_PCA_in))], center = T, scale = T)
eff_PCA_out_summary <- summary(eff_PCA_out) # Get importance of components.
capture.output(eff_PCA_out_summary, file = 'R_analyses_output/PCA/eff_PCA_out_summary.txt')
pdf('R_analyses_output/PCA/eff_PCA_out_biplot.pdf', width = 13, height = 8) # Create the pdf output file.
eff_PCA_out_biplot <- ggbiplot(eff_PCA_out, ellipse = T, groups = as.factor(unique(eff_PCA_in$Time))) +
geom_text(label = eff_PCA_in$Time, color = 'black', size = 4, position = position_jitter(width = .1, height = .1)) +
geom_point(shape = 21, colour = 'black', fill = 'black')
print(eff_PCA_out_biplot)
dev.off() # Tell R you're done adding content to the pdf file.
prcomp
?prcomp
eff_PCA_out_biplot <- ggbiplot(eff_PCA_out, ellipse = T, groups = as.factor(unique(eff_PCA_in$Time))) +
geom_text(label = eff_PCA_in$Time, color = 'black', size = 4, position = position_jitter(width = .1, height = .1)) +
geom_point(shape = 21, colour = 'black', fill = 'black')
View(eff_PCA_out)
View(eff_PCA_out_biplot)
library(sasLM)
library(readxl)
library(dplyr)
# library(ggplot2)
library(rstudioapi)
library(devtools)
library(ggbiplot)
library(Hmisc)
library(reshape2)
eff_PCA_out_biplot <- ggbiplot(eff_PCA_out, ellipse = T, groups = as.factor(unique(eff_PCA_in$Time))) +
geom_text(label = eff_PCA_in$Time, color = 'black', size = 4, position = position_jitter(width = .1, height = .1)) +
geom_point(shape = 21, colour = 'black', fill = 'black')
print(eff_PCA_out_biplot)
sessionInfo()
# Obtain info on installed packages - necessary when writing a paper.
RStudio.Version()
# Information for references:
citation()
citation("pkgname")
citation(sasLM)
citation("sasLM"))
citation("sasLM")
citation("ggbiplot")
citation("Hmisc")
citation("reshape2")
library(sasLM)
library(readxl)
library(dplyr)
library(rstudioapi)
library(devtools)
library(ggbiplot)
library(Hmisc)
library(reshape2)
# Scatterplot comparing E. coli & uidA counts in terms of sample for RS & EF:
uidA_Ecoli_RS_EF <- read_excel('Excel_analyses/uidA_Ecoli_RS_EF.xlsx')
View(uidA_Ecoli_RS_EF)
View(uidA_Ecoli_RS_EF)
uidA_Ecoli_RS_EF <- rename(uidA_Ecoli_RS_EF,
'Ecoli' = 'E. coli (MPN/mL)', 'uidA_RS' = 'uidA_RS (GCN/mL sample)',
'uidA_EF' = 'uidA_EF (GCN/mL sample)')
# Scatterplot comparing E. coli & uidA counts in terms of sample for RS & EF:
uidA_Ecoli_RS_EF <- read_excel('Excel_analyses/uidA_Ecoli_RS_EF.xlsx')
uidA_Ecoli_RS_EF <- rename(uidA_Ecoli_RS_EF,
c('Ecoli' = 'E. coli (MPN/mL)', 'uidA_RS' = 'uidA_RS (GCN/mL sample)',
'uidA_EF' = 'uidA_EF (GCN/mL sample)'))
View(uidA_Ecoli_RS_EF)
# Scatterplot comparing E. coli & uidA counts in terms of sample for RS & EF:
uidA_Ecoli_RS_EF <- read_excel('Excel_analyses/uidA_Ecoli_RS_EF.xlsx')
uidA_Ecoli_RS_EF <- rename(uidA_Ecoli_RS_EF,
c('Ecoli' = 'E. coli (MPN/mL)',
'uidA_RS' = 'uidA_RS (GCN/mL sample)',
'uidA_EF' = 'uidA_EF (GCN/mL sample)'))
uidA_Ecoli_RS_EF <- rename(uidA_Ecoli_RS_EF,
c('E. coli (MPN/mL)' = 'Ecoli',
'uidA_RS' = 'uidA_RS (GCN/mL sample)',
'uidA_EF' = 'uidA_EF (GCN/mL sample)'))
uidA_Ecoli_RS_EF <- rename(uidA_Ecoli_RS_EF,
c('E. coli (MPN/mL)' = 'Ecoli',
'uidA_RS (GCN/mL sample)' = 'uidA_RS',
'uidA_EF (GCN/mL sample)' = 'uidA_EF'))
# Scatterplot comparing E. coli & uidA counts in terms of sample for RS & EF:
uidA_Ecoli_RS_EF <- read_excel('Excel_analyses/uidA_Ecoli_RS_EF.xlsx')
uidA_Ecoli_RS_EF <- rename(uidA_Ecoli_RS_EF,
c('E. coli (MPN/mL)' = 'Ecoli',
'uidA_RS (GCN/mL sample)' = 'uidA_RS',
'uidA_EF (GCN/mL sample)' = 'uidA_EF'))
View(uidA_Ecoli_RS_EF)
colnames(uidA_Ecoli_RS_EF)
uidA_Ecoli_RS_EF_scatterplot <- ggplot(uidA_Ecoli_RS_EF, aes(x = c('uidA_RS', 'uidA_EF'), y = 'Ecoli'))
uidA_Ecoli_RS_EF_scatterplot
uidA_Ecoli_RS_EF_scatterplot <- ggplot(uidA_Ecoli_RS_EF, aes(x = 'uidA_RS', y = 'Ecoli'))
uidA_Ecoli_RS_EF_scatterplot
uidA_Ecoli_RS_EF_scatterplot <- ggplot(uidA_Ecoli_RS_EF, aes(x = uidA_RS, y = Ecoli))
uidA_Ecoli_RS_EF_scatterplot
uidA_Ecoli_RS_EF_scatterplot <- ggplot(uidA_Ecoli_RS_EF, aes(x = uidA_RS, y = Ecoli)) +
geom_point()
uidA_Ecoli_RS_EF_scatterplot
uidA_Ecoli_RS_EF_scatterplot <- ggplot(uidA_Ecoli_RS_EF, aes(x = c(uidA_RS, uidA_EF), y = Ecoli)) +
geom_point()
uidA_Ecoli_RS_EF_scatterplot
# Scatterplot comparing E. coli & uidA counts in terms of sample for RS & EF:
uidA_Ecoli_RS_EF <- read_excel('Excel_analyses/uidA_Ecoli_RS_EF.xlsx')
uidA_Ecoli_RS_EF <- rename(uidA_Ecoli_RS_EF,
c('E. coli (MPN/mL)' = 'Ecoli',
'uidA (GCN/mL sample)' = 'uidA'))
View(uidA_Ecoli_RS_EF)
uidA_Ecoli_RS_EF_scatterplot <- ggplot(uidA_Ecoli_RS_EF, aes(x = uidA, y = Ecoli)) +
geom_point()
uidA_Ecoli_RS_EF_scatterplot
uidA_Ecoli_RS_EF_scatterplot <- ggplot(uidA_Ecoli_RS_EF, aes(x = uidA, y = Ecoli), fill = Source) +
geom_point()
uidA_Ecoli_RS_EF_scatterplot
uidA_Ecoli_RS_EF_scatterplot <- ggplot(uidA_Ecoli_RS_EF, aes(x = uidA, y = Ecoli), fill = "Source") +
geom_point()
uidA_Ecoli_RS_EF_scatterplot
uidA_Ecoli_RS_EF_scatterplot <- ggplot(uidA_Ecoli_RS_EF, aes(x = uidA, y = Ecoli), fill = "Source") +
geom_point()
uidA_Ecoli_RS_EF_scatterplot
uidA_Ecoli_RS_EF_scatterplot <- ggplot(uidA_Ecoli_RS_EF, aes(x = uidA, y = Ecoli, fill = "Source")) +
geom_point()
uidA_Ecoli_RS_EF_scatterplot
uidA_Ecoli_RS_EF_scatterplot <- ggplot(uidA_Ecoli_RS_EF, aes(x = uidA, y = Ecoli, fill = Source)) +
geom_point()
uidA_Ecoli_RS_EF_scatterplot
uidA_Ecoli_RS_EF_scatterplot <- ggplot(uidA_Ecoli_RS_EF, aes(x = uidA, y = Ecoli)) +
geom_point(colour = Source)
uidA_Ecoli_RS_EF_scatterplot <- ggplot(uidA_Ecoli_RS_EF, aes(x = uidA, y = Ecoli)) +
geom_point(colour = "Source")
uidA_Ecoli_RS_EF_scatterplot
uidA_Ecoli_RS_EF_scatterplot <- ggplot(uidA_Ecoli_RS_EF, aes(x = uidA, y = Ecoli, fill = Source)) +
geom_point()
uidA_Ecoli_RS_EF_scatterplot <- ggplot(uidA_Ecoli_RS_EF, aes(x = uidA, y = Ecoli, color = Source)) +
geom_point()
uidA_Ecoli_RS_EF_scatterplot
uidA_Ecoli_RS_EF_scatterplot <- ggplot(uidA_Ecoli_RS_EF, aes(x = uidA, y = Ecoli, color = Source)) +
geom_point(size = 3)
uidA_Ecoli_RS_EF_scatterplot <- ggplot(uidA_Ecoli_RS_EF, aes(x = uidA, y = Ecoli, color = Source)) +
geom_jitter(size = 3)
uidA_Ecoli_RS_EF_scatterplot <- ggplot(uidA_Ecoli_RS_EF, aes(x = uidA, y = Ecoli, color = Source)) +
geom_jitter(size = 3)
uidA_Ecoli_RS_EF_scatterplot
uidA_Ecoli_RS_EF_scatterplot <- ggplot(uidA_Ecoli_RS_EF, aes(x = uidA, y = Ecoli, color = Source)) +
geom_jitter(size = 2)
uidA_Ecoli_RS_EF_scatterplot
uidA_Ecoli_RS_EF_scatterplot <- ggplot(uidA_Ecoli_RS_EF, aes(x = uidA, y = Ecoli, color = Source)) +
geom_jitter(width = 0.1, height = 0.1, size = 2)
uidA_Ecoli_RS_EF_scatterplot
uidA_Ecoli_RS_EF_scatterplot <- ggplot(uidA_Ecoli_RS_EF, aes(x = uidA, y = Ecoli, color = Source)) +
geom_jitter(width = 1, height = 1, size = 2)
uidA_Ecoli_RS_EF_scatterplot
uidA_Ecoli_RS_EF_scatterplot
uidA_Ecoli_RS_EF_scatterplot
<- ggplot(uidA_Ecoli_RS_EF, aes(x = uidA, y = Ecoli, color = Source)) +
geom_jitter(width = 0.5, height = 0.5, size = 2)
uidA_Ecoli_RS_EF_scatterplot <- ggplot(uidA_Ecoli_RS_EF, aes(x = uidA, y = Ecoli, color = Source)) +
geom_jitter(width = 0.5, height = 0.5, size = 2)
uidA_Ecoli_RS_EF_scatterplot
uidA_Ecoli_RS_EF_scatterplot
uidA_Ecoli_RS_EF_scatterplot
uidA_Ecoli_RS_EF_scatterplot <- ggplot(uidA_Ecoli_RS_EF, aes(x = uidA, y = Ecoli, color = Source)) +
geom_jitter(width = 0.25, height = 0.25, size = 2)
uidA_Ecoli_RS_EF_scatterplot
uidA_Ecoli_RS_EF_scatterplot
uidA_Ecoli_RS_EF_scatterplot <- ggplot(uidA_Ecoli_RS_EF, aes(x = uidA, y = Ecoli, color = Source)) +
geom_jitter(width = 0.2, height = 0.2, size = 2)
uidA_Ecoli_RS_EF_scatterplot <- ggplot(uidA_Ecoli_RS_EF, aes(x = uidA, y = Ecoli, color = Source)) +
geom_jitter(width = 0.2, height = 0.2, size = 2.5)
uidA_Ecoli_RS_EF_scatterplot
uidA_Ecoli_RS_EF_scatterplot
uidA_Ecoli_RS_EF_scatterplot <- ggplot(uidA_Ecoli_RS_EF, aes(x = uidA, y = Ecoli, color = Source)) +
geom_jitter(width = 0.2, height = 0.2, size = 2.5) +
labs(x = "uidA (GCN per mL of sample)", y = "E. coli (MPN per mL)")
uidA_Ecoli_RS_EF_scatterplot
uidA_Ecoli_RS_EF_scatterplot <- ggplot(uidA_Ecoli_RS_EF, aes(x = uidA, y = Ecoli, color = Source)) +
geom_jitter(width = 0.2, height = 0.2, size = 2.5) +
labs(x = "uidA (GCN per mL of sample)", y = "E. coli (MPN per mL)") +
theme(legend.title = element_text(face = "bold"))
uidA_Ecoli_RS_EF_scatterplot
uidA_Ecoli_RS_EF_scatterplot <- ggplot(uidA_Ecoli_RS_EF, aes(x = uidA, y = Ecoli, color = Source)) +
geom_jitter(width = 0.2, height = 0.2, size = 2.5) +
labs(x = "uidA (GCN per mL of sample)", y = "E. coli (MPN per mL)", face = "bold") +
theme(legend.title = element_text(face = "bold"))
uidA_Ecoli_RS_EF_scatterplot
uidA_Ecoli_RS_EF_scatterplot <- ggplot(uidA_Ecoli_RS_EF, aes(x = uidA, y = Ecoli, color = Source)) +
geom_jitter(width = 0.2, height = 0.2, size = 2.5) +
labs(x = "uidA (GCN per mL of sample)", y = "E. coli (MPN per mL)") +
theme(legend.title = element_text(face = "bold"),
axis.title.x = element_text(face = "bold"),
axis.title.y = element_text(face = "bold"))
uidA_Ecoli_RS_EF_scatterplot
uidA_Ecoli_RS_EF_scatterplot
uidA_Ecoli_RS_EF_scatterplot
uidA_Ecoli_RS_EF_scatterplot
uidA_Ecoli_RS_EF_scatterplot
uidA_Ecoli_RS_EF_scatterplot <- ggplot(uidA_Ecoli_RS_EF, aes(x = uidA, y = Ecoli, color = Source, label = Event)) +
geom_jitter(width = 0.2, height = 0.2, size = 2.5) +
labs(x = "uidA (GCN per mL of sample)", y = "E. coli (MPN per mL)") +
theme(legend.title = element_text(face = "bold"),
axis.title.x = element_text(face = "bold"),
axis.title.y = element_text(face = "bold"))
library(sasLM)
library(readxl)
library(dplyr)
library(rstudioapi)
library(devtools)
library(ggbiplot)
library(Hmisc)
library(reshape2)
uidA_Ecoli_RS_EF_scatterplot <- ggplot(uidA_Ecoli_RS_EF, aes(x = uidA, y = Ecoli, color = Source, label = Event)) +
geom_jitter(width = 0.2, height = 0.2, size = 2.5) +
labs(x = "uidA (GCN per mL of sample)", y = "E. coli (MPN per mL)") +
theme(legend.title = element_text(face = "bold"),
axis.title.x = element_text(face = "bold"),
axis.title.y = element_text(face = "bold"))
uidA_Ecoli_RS_EF_scatterplot
uidA_Ecoli_RS_EF_scatterplot <- ggplot(uidA_Ecoli_RS_EF, aes(x = uidA, y = Ecoli, color = Source)) +
geom_jitter(width = 0.2, height = 0.2, size = 2.5) +
labs(x = "uidA (GCN per mL of sample)", y = "E. coli (MPN per mL)") +
theme(legend.title = element_text(face = "bold"),
axis.title.x = element_text(face = "bold"),
axis.title.y = element_text(face = "bold")) +
geom_text(aes(label = Event))
uidA_Ecoli_RS_EF_scatterplot
uidA_Ecoli_RS_EF_scatterplot <- ggplot(uidA_Ecoli_RS_EF, aes(x = uidA, y = Ecoli, color = Source)) +
geom_jitter(width = 0.2, height = 0.2, size = 2.5) +
labs(x = "uidA (GCN per mL of sample)", y = "E. coli (MPN per mL)") +
theme(legend.title = element_text(face = "bold"),
axis.title.x = element_text(face = "bold"),
axis.title.y = element_text(face = "bold")) +
geom_text(aes(label = Event), hjust = 0.1, vjust = 0.1)
uidA_Ecoli_RS_EF_scatterplot
uidA_Ecoli_RS_EF_scatterplot
uidA_Ecoli_RS_EF_scatterplot
uidA_Ecoli_RS_EF_scatterplot
uidA_Ecoli_RS_EF_scatterplot
uidA_Ecoli_RS_EF_scatterplot
uidA_Ecoli_RS_EF_scatterplot
uidA_Ecoli_RS_EF_scatterplot <- ggplot(uidA_Ecoli_RS_EF, aes(x = uidA, y = Ecoli, color = Source)) +
geom_jitter(width = 0.2, height = 0.2, size = 2.5) +
labs(x = "uidA (GCN per mL of sample)", y = "E. coli (MPN per mL)") +
theme(legend.title = element_text(face = "bold"),
axis.title.x = element_text(face = "bold"),
axis.title.y = element_text(face = "bold")) +
geom_text(aes(label = Event), hjust = 0.2, vjust = 0.2)
uidA_Ecoli_RS_EF_scatterplot
uidA_Ecoli_RS_EF_scatterplot
uidA_Ecoli_RS_EF_scatterplot
uidA_Ecoli_RS_EF_scatterplot
uidA_Ecoli_RS_EF_scatterplot
uidA_Ecoli_RS_EF_scatterplot
uidA_Ecoli_RS_EF_scatterplot
uidA_Ecoli_RS_EF_scatterplot
uidA_Ecoli_RS_EF_scatterplot
uidA_Ecoli_RS_EF_scatterplot <- ggplot(uidA_Ecoli_RS_EF, aes(x = uidA, y = Ecoli, color = Source)) +
geom_jitter(width = 0.2, height = 0.2, size = 2.5) +
labs(x = "uidA (GCN per mL of sample)", y = "E. coli (MPN per mL)") +
theme(legend.title = element_text(face = "bold"),
axis.title.x = element_text(face = "bold"),
axis.title.y = element_text(face = "bold")) +
geom_text(aes(label = Event), hjust = 0.5, vjust = 0.5)
uidA_Ecoli_RS_EF_scatterplot
uidA_Ecoli_RS_EF_scatterplot
install.packages("ggrepel") # Contains function to point label to datapoint's new jittered position.
library(ggrepel)
uidA_Ecoli_RS_EF_scatterplot <- ggplot(uidA_Ecoli_RS_EF, aes(x = uidA, y = Ecoli, color = Source, label = Event)) +
geom_jitter(width = 0.2, height = 0.2, size = 2.5) +
geom_label_repel() +
labs(x = "uidA (GCN per mL of sample)", y = "E. coli (MPN per mL)") +
theme(legend.title = element_text(face = "bold"),
axis.title.x = element_text(face = "bold"),
axis.title.y = element_text(face = "bold"))
uidA_Ecoli_RS_EF_scatterplot
uidA_Ecoli_RS_EF_scatterplot
uidA_Ecoli_RS_EF_scatterplot
uidA_Ecoli_RS_EF_scatterplot
uidA_Ecoli_RS_EF_scatterplot
uidA_Ecoli_RS_EF_scatterplot
uidA_Ecoli_RS_EF_scatterplot
uidA_Ecoli_RS_EF_scatterplot
uidA_Ecoli_RS_EF_scatterplot
uidA_Ecoli_RS_EF_scatterplot <- ggplot(uidA_Ecoli_RS_EF, aes(x = uidA, y = Ecoli, color = Source, label = Event)) +
geom_jitter(size = 2.5) +
geom_label_repel() +
labs(x = "uidA (GCN per mL of sample)", y = "E. coli (MPN per mL)") +
theme(legend.title = element_text(face = "bold"),
axis.title.x = element_text(face = "bold"),
axis.title.y = element_text(face = "bold"))
uidA_Ecoli_RS_EF_scatterplot
uidA_Ecoli_RS_EF_scatterplot
uidA_Ecoli_RS_EF_scatterplot
uidA_Ecoli_RS_EF_scatterplot
uidA_Ecoli_RS_EF_scatterplot
uidA_Ecoli_RS_EF_scatterplot
uidA_Ecoli_RS_EF_scatterplot
uidA_Ecoli_RS_EF_scatterplot
uidA_Ecoli_RS_EF_scatterplot
uidA_Ecoli_RS_EF_scatterplot
uidA_Ecoli_RS_EF_scatterplot
uidA_Ecoli_RS_EF_scatterplot
uidA_Ecoli_RS_EF_scatterplot
?ggbiplot
### PC2 vs PC3:
pdf('R_analyses_output/PCA/eff_PCA_out_biplot_23.pdf', width = 13, height = 8) # Create the pdf output file.
eff_PCA_out_biplot <- ggbiplot(eff_PCA_out, choices = c(2,3), ellipse = T, groups = as.factor(unique(eff_PCA_in$Time))) +
geom_text(label = eff_PCA_in$Time, color = 'black', size = 4, position = position_jitter(width = .1, height = .1)) +
geom_point(shape = 21, colour = 'black', fill = 'black')
print(eff_PCA_out_biplot)
dev.off() # Tell R you're done adding content to the pdf file.
## Biplots:
### PC1 vs PC2:
pdf('R_analyses_output/PCA/eff_PCA_out_biplot_12.pdf', width = 13, height = 8) # Create the pdf output file.
eff_PCA_out_biplot_12 <- ggbiplot(eff_PCA_out, ellipse = T, groups = as.factor(unique(eff_PCA_in$Time))) +
geom_text(label = eff_PCA_in$Time, color = 'black', size = 4, position = position_jitter(width = .1, height = .1)) +
geom_point(shape = 21, colour = 'black', fill = 'black')
print(eff_PCA_out_biplot_12)
eff_PCA_out_biplot_12
# Rota:
Rota <- read_excel('Excel_analyses/Rota.xls') %>%
input.cleaning()
library(sasLM)
library(readxl)
library(dplyr)
library(rstudioapi)
library(devtools)
library(ggbiplot)
library(Hmisc)
library(reshape2)
# Rota:
Rota <- read_excel('Excel_analyses/Rota.xls') %>%
input.cleaning()
dir.create('R_analyses_output/Rota') # Create folder to contain output files.
# uidA:
uidA <- read_excel('Excel_analyses/uidA.xls') %>%
input.cleaning()
dir.create('R_analyses_output/uidA') # Create folder to contain output files.
eff_PCA_in <- read_excel('Excel_analyses/eff_PCA_in.xlsx')
eff_PCA_in
eff_PCA_out <- prcomp(eff_PCA_in[,c(2:ncol(eff_PCA_in))], center = T, scale = T)
eff_PCA_out_summary <- summary(eff_PCA_out) # Get importance of components.
capture.output(eff_PCA_out_summary, file = 'R_analyses_output/PCA/eff_PCA_out_summary.txt')
## Biplots:
### PC1 vs PC2:
pdf('R_analyses_output/PCA/eff_PCA_out_biplot_12.pdf', width = 13, height = 8) # Create the pdf output file.
eff_PCA_out_biplot_12 <- ggbiplot(eff_PCA_out, ellipse = T, groups = as.factor(unique(eff_PCA_in$Time))) +
geom_text(label = eff_PCA_in$Time, color = 'black', size = 4, position = position_jitter(width = .1, height = .1)) +
geom_point(shape = 21, colour = 'black', fill = 'black')
print(eff_PCA_out_biplot_12)
dev.off() # Tell R you're done adding content to the pdf file.
pdf('R_analyses_output/PCA/eff_PCA_out_biplot_noAxes_12.pdf', width = 13, height = 8) # Create the pdf output file.
eff_PCA_out_biplot_noAxes_12 <- ggbiplot(eff_PCA_out, ellipse = T, groups = as.factor(unique(eff_PCA_in$Time)), var.axes = F) +
geom_text(label = eff_PCA_in$Time, color = 'black', size = 4, position = position_jitter(width = .1, height = .1)) +
geom_point(shape = 21, colour = 'black', fill = 'black')
print(eff_PCA_out_biplot_noAxes_12)
dev.off() # Tell R you're done adding content to the pdf file.
pdf('R_analyses_output/PCA/eff_PCA_out_biplot_12.pdf', width = 13, height = 8) # Create the pdf output file.
eff_PCA_out_biplot_12 <- ggbiplot(eff_PCA_out, ellipse = T, groups = as.factor(unique(eff_PCA_in$Time))) +
geom_text(label = eff_PCA_in$Time, color = 'black', size = 4, position = position_jitter(width = .1, height = .1)) +
geom_point(shape = 21, colour = 'black', fill = 'black')
print(eff_PCA_out_biplot_12)
dev.off() # Tell R you're done adding content to the pdf file.
pdf('R_analyses_output/PCA/eff_PCA_out_biplot_noAxes_12.pdf', width = 13, height = 8) # Create the pdf output file.
eff_PCA_out_biplot_noAxes_12 <- ggbiplot(eff_PCA_out, ellipse = T, groups = as.factor(unique(eff_PCA_in$Time)), var.axes = F) +
geom_text(label = eff_PCA_in$Time, color = 'black', size = 4, position = position_jitter(width = .1, height = .1)) +
geom_point(shape = 21, colour = 'black', fill = 'black')
print(eff_PCA_out_biplot_noAxes_12)
dev.off() # Tell R you're done adding content to the pdf file.
### PC2 vs PC3:
pdf('R_analyses_output/PCA/eff_PCA_out_biplot_23.pdf', width = 13, height = 8) # Create the pdf output file.
eff_PCA_out_biplot_23 <- ggbiplot(eff_PCA_out, choices = c(2,3), ellipse = T, groups = as.factor(unique(eff_PCA_in$Time))) +
geom_text(label = eff_PCA_in$Time, color = 'black', size = 4, position = position_jitter(width = .1, height = .1)) +
geom_point(shape = 21, colour = 'black', fill = 'black')
print(eff_PCA_out_biplot_23)
dev.off() # Tell R you're done adding content to the pdf file.
pdf('R_analyses_output/PCA/eff_PCA_out_biplot_noAxes_23.pdf', width = 13, height = 8) # Create the pdf output file.
eff_PCA_out_biplot_noAxes_23 <- ggbiplot(eff_PCA_out, choices = c(2,3), ellipse = T, groups = as.factor(unique(eff_PCA_in$Time)), var.axes = F) +
geom_text(label = eff_PCA_in$Time, color = 'black', size = 4, position = position_jitter(width = .1, height = .1)) +
geom_point(shape = 21, colour = 'black', fill = 'black')
print(eff_PCA_out_biplot_noAxes_23)
dev.off() # Tell R you're done adding content to the pdf file.
library(sasLM)
library(readxl)
library(dplyr)
library(rstudioapi)
library(devtools)
library(ggbiplot)
library(Hmisc)
library(reshape2)
## Biplots:
### PC1 vs PC2:
pdf('R_analyses_output/PCA/eff_PCA_out_biplot_12.pdf', width = 13, height = 8) # Create the pdf output file.
eff_PCA_out_biplot_12 <- ggbiplot(eff_PCA_out, ellipse = T, groups = as.factor(unique(eff_PCA_in$Time))) +
geom_text(label = eff_PCA_in$Time, color = 'black', size = 4, position = position_jitter(width = .1, height = .1)) +
geom_point(shape = 21, colour = 'black', fill = 'black')
print(eff_PCA_out_biplot_12)
dev.off() # Tell R you're done adding content to the pdf file.
pdf('R_analyses_output/PCA/eff_PCA_out_biplot_noAxes_12.pdf', width = 13, height = 8) # Create the pdf output file.
eff_PCA_out_biplot_noAxes_12 <- ggbiplot(eff_PCA_out, ellipse = T, groups = as.factor(unique(eff_PCA_in$Time)), var.axes = F) +
geom_text(label = eff_PCA_in$Time, color = 'black', size = 4, position = position_jitter(width = .1, height = .1)) +
geom_point(shape = 21, colour = 'black', fill = 'black')
print(eff_PCA_out_biplot_noAxes_12)
dev.off() # Tell R you're done adding content to the pdf file.
### PC2 vs PC3:
pdf('R_analyses_output/PCA/eff_PCA_out_biplot_23.pdf', width = 13, height = 8) # Create the pdf output file.
eff_PCA_out_biplot_23 <- ggbiplot(eff_PCA_out, choices = c(2,3), ellipse = T, groups = as.factor(unique(eff_PCA_in$Time))) +
geom_text(label = eff_PCA_in$Time, color = 'black', size = 4, position = position_jitter(width = .1, height = .1)) +
geom_point(shape = 21, colour = 'black', fill = 'black')
print(eff_PCA_out_biplot_23)
dev.off() # Tell R you're done adding content to the pdf file.
pdf('R_analyses_output/PCA/eff_PCA_out_biplot_noAxes_23.pdf', width = 13, height = 8) # Create the pdf output file.
eff_PCA_out_biplot_noAxes_23 <- ggbiplot(eff_PCA_out, choices = c(2,3), ellipse = T, groups = as.factor(unique(eff_PCA_in$Time)), var.axes = F) +
geom_text(label = eff_PCA_in$Time, color = 'black', size = 4, position = position_jitter(width = .1, height = .1)) +
geom_point(shape = 21, colour = 'black', fill = 'black')
print(eff_PCA_out_biplot_noAxes_23)
dev.off() # Tell R you're done adding content to the pdf file.
### PC1 vs PC3:
pdf('R_analyses_output/PCA/eff_PCA_out_biplot_13.pdf', width = 13, height = 8) # Create the pdf output file.
eff_PCA_out_biplot_13 <- ggbiplot(eff_PCA_out, choices = c(1,3), ellipse = T, groups = as.factor(unique(eff_PCA_in$Time))) +
geom_text(label = eff_PCA_in$Time, color = 'black', size = 4, position = position_jitter(width = .1, height = .1)) +
geom_point(shape = 21, colour = 'black', fill = 'black')
print(eff_PCA_out_biplot_13)
dev.off() # Tell R you're done adding content to the pdf file.
pdf('R_analyses_output/PCA/eff_PCA_out_biplot_noAxes_13.pdf', width = 13, height = 8) # Create the pdf output file.
eff_PCA_out_biplot_noAxes_13 <- ggbiplot(eff_PCA_out, choices = c(1,3), ellipse = T, groups = as.factor(unique(eff_PCA_in$Time)), var.axes = F) +
geom_text(label = eff_PCA_in$Time, color = 'black', size = 4, position = position_jitter(width = .1, height = .1)) +
geom_point(shape = 21, colour = 'black', fill = 'black')
print(eff_PCA_out_biplot_noAxes_13)
dev.off() # Tell R you're done adding content to the pdf file.
capture.output(eff_PCA_out_summary, file = 'R_analyses_output/PCA/eff_PCA_out_summary.csv')
